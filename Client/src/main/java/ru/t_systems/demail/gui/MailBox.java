/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.t_systems.demail.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.ListCellRenderer;
import javax.swing.SwingWorker;
import ru.t_systems.demail.client.Client;
import ru.t_systems.demail.socket.dto.AccountDTO;
import ru.t_systems.demail.socket.dto.message.LabelDTO;
import ru.t_systems.demail.socket.dto.message.MessageDTO;
import ru.t_systems.demail.socket.dto.message.MessageStatussDTO;
import ru.t_systems.demail.soket.command.Command;
import ru.t_systems.demail.soket.command.CommandType;
import ru.t_systems.demail.soket.command.Result;

/**
 *
 * @author Dart
 */
public class MailBox extends javax.swing.JFrame {

    List<String> labb;

    /**
     * Creates new form mailbox
     */
    public MailBox() {
        initComponents();
        setLocationRelativeTo(null);
        if (Client.getUser() == null) {
            this.setVisible(false);
            Login login = new Login();
            login.setVisible(true);

        } else {

            Set<AccountDTO> account = Client.getUser().getAccount();
            Set<LabelDTO> label = new HashSet<LabelDTO>();

            for (Iterator<AccountDTO> it = account.iterator(); it.hasNext();) {
                AccountDTO accountDTO = it.next();
                label.addAll(accountDTO.getLabel());
            }
            labb = new ArrayList<String>();
            for (Iterator<LabelDTO> it = label.iterator(); it.hasNext();) {
                LabelDTO labelDTO = it.next();
                labb.add(labelDTO.getName() + " - " + labelDTO.getAccount());
            }

            if (Client.getMessageStatus() == null) {
                LoadInputMailWorker wk = new LoadInputMailWorker();
                wk.execute();
            }
            systemFolder.setSelectedIndex(0);



            // ListCellRenderer renderer = new ComplexCellRenderer();
            // messageList.setCellRenderer(renderer);
            //  messageList.setListData(Client.getMessageStatus().toArray());
            labelList.setListData(labb.toArray());
            if (labb.size() > 0) {


                labelPopUp.setVisible(true);

                labelList.addMouseListener(new MouseAdapter() {
                    public void mousePressed(MouseEvent e) {
                        check(e);
                    }

                    public void mouseReleased(MouseEvent e) {
                        check(e);
                    }

                    public void check(MouseEvent e) {
                        if (e.isPopupTrigger()) { //if the event shows the menu

                            labelList.setSelectedIndex(labelList.locationToIndex(e.getPoint())); //select the item
                            labelPopUp.show(labelList, e.getX(), e.getY()); //and show the menu

                        }
                    }
                });
            }
            messageList.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    check(e);
                }

                public void mouseReleased(MouseEvent e) {
                    check(e);
                }

                public void check(MouseEvent e) {
                    if (e.isPopupTrigger()) { //if the event shows the menu
                        messageList.setSelectedIndex(messageList.locationToIndex(e.getPoint())); //select the item
                        messagePopup.show(messageList, e.getX(), e.getY()); //and show the menu
                    }
                }
            });
            this.setVisible(true);
        }

    }

    private int getRow(Point point) {
        return labelList.locationToIndex(point);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelPopUp = new javax.swing.JPopupMenu();
        popLabelRename = new javax.swing.JMenuItem();
        popLableDelete = new javax.swing.JMenuItem();
        confirmDeleteLabel = new javax.swing.JDialog();
        confirmDeleteYes = new javax.swing.JButton();
        confirmDeleteNo = new javax.swing.JButton();
        confirmDeleteLabelText = new javax.swing.JLabel();
        confirmRenameLabel = new javax.swing.JDialog();
        newNameConfirmRenameLabel = new javax.swing.JTextField();
        labelNewNameConfirmRenameLabel = new javax.swing.JLabel();
        confirmRenameYes = new javax.swing.JButton();
        confirmRenameNo = new javax.swing.JButton();
        newMessage = new javax.swing.JDialog();
        newMessageAccontsSenderList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newMessageAccountRecipient = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        newMessageTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newMessageBody = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        messagePopup = new javax.swing.JPopupMenu();
        Open = new javax.swing.JMenuItem();
        moveMessageToFolder = new javax.swing.JMenuItem();
        showMessage = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        showMessageTo = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        showMessageTitle = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        showMessageBody = new javax.swing.JTextArea();
        Re = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        showMessageFrom = new javax.swing.JTextPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        labelList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        systemFolder = new javax.swing.JList();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        messagesList = new javax.swing.JScrollPane();
        messageList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        statusMailBox = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mainFile = new javax.swing.JMenu();
        mainLogout = new javax.swing.JMenuItem();
        mainExit = new javax.swing.JMenuItem();
        mainEdit = new javax.swing.JMenu();
        mainCreateFolder = new javax.swing.JMenuItem();

        popLabelRename.setText("Rename");
        popLabelRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popLabelRenameActionPerformed(evt);
            }
        });
        labelPopUp.add(popLabelRename);

        popLableDelete.setText("Delete");
        popLableDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popLableDeleteActionPerformed(evt);
            }
        });
        labelPopUp.add(popLableDelete);

        confirmDeleteLabel.setMaximumSize(new java.awt.Dimension(400, 150));
        confirmDeleteLabel.setMinimumSize(new java.awt.Dimension(400, 150));
        confirmDeleteLabel.setPreferredSize(new java.awt.Dimension(400, 150));
        confirmDeleteLabel.setResizable(false);
        confirmDeleteLabel.setType(java.awt.Window.Type.UTILITY);

        confirmDeleteYes.setText("Yes");
        confirmDeleteYes.setFocusable(false);
        confirmDeleteYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmDeleteYesActionPerformed(evt);
            }
        });

        confirmDeleteNo.setText("No");
        confirmDeleteNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmDeleteNoActionPerformed(evt);
            }
        });

        confirmDeleteLabelText.setText("Уверен???");

        javax.swing.GroupLayout confirmDeleteLabelLayout = new javax.swing.GroupLayout(confirmDeleteLabel.getContentPane());
        confirmDeleteLabel.getContentPane().setLayout(confirmDeleteLabelLayout);
        confirmDeleteLabelLayout.setHorizontalGroup(
            confirmDeleteLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDeleteLabelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(confirmDeleteLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(confirmDeleteLabelLayout.createSequentialGroup()
                        .addComponent(confirmDeleteLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(confirmDeleteLabelLayout.createSequentialGroup()
                        .addComponent(confirmDeleteYes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmDeleteNo)
                        .addGap(51, 51, 51))))
        );
        confirmDeleteLabelLayout.setVerticalGroup(
            confirmDeleteLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmDeleteLabelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(confirmDeleteLabelText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(confirmDeleteLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmDeleteYes)
                    .addComponent(confirmDeleteNo))
                .addGap(30, 30, 30))
        );

        confirmDeleteLabel.getAccessibleContext().setAccessibleParent(popLableDelete);

        confirmRenameLabel.setMinimumSize(new java.awt.Dimension(400, 150));
        confirmRenameLabel.setResizable(false);
        confirmRenameLabel.setType(java.awt.Window.Type.UTILITY);

        labelNewNameConfirmRenameLabel.setText("123");

        confirmRenameYes.setText("Yes");
        confirmRenameYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRenameYesActionPerformed(evt);
            }
        });

        confirmRenameNo.setText("No");
        confirmRenameNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRenameNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout confirmRenameLabelLayout = new javax.swing.GroupLayout(confirmRenameLabel.getContentPane());
        confirmRenameLabel.getContentPane().setLayout(confirmRenameLabelLayout);
        confirmRenameLabelLayout.setHorizontalGroup(
            confirmRenameLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmRenameLabelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(confirmRenameLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNewNameConfirmRenameLabel)
                    .addGroup(confirmRenameLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(confirmRenameLabelLayout.createSequentialGroup()
                            .addComponent(confirmRenameYes)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(confirmRenameNo))
                        .addComponent(newNameConfirmRenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        confirmRenameLabelLayout.setVerticalGroup(
            confirmRenameLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmRenameLabelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(labelNewNameConfirmRenameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newNameConfirmRenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(confirmRenameLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmRenameYes)
                    .addComponent(confirmRenameNo))
                .addContainerGap())
        );

        newMessage.setMinimumSize(new java.awt.Dimension(670, 670));
        newMessage.setResizable(false);
        newMessage.setType(java.awt.Window.Type.UTILITY);

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        jLabel3.setText("Title:");

        jLabel4.setText("Body:");

        newMessageBody.setColumns(20);
        newMessageBody.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        newMessageBody.setRows(5);
        jScrollPane2.setViewportView(newMessageBody);

        jButton3.setText("Submit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newMessageLayout = new javax.swing.GroupLayout(newMessage.getContentPane());
        newMessage.getContentPane().setLayout(newMessageLayout);
        newMessageLayout.setHorizontalGroup(
            newMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newMessageLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(newMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(newMessageLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jSeparator1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(newMessageAccontsSenderList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newMessageAccountRecipient)
                    .addComponent(newMessageTitle))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        newMessageLayout.setVerticalGroup(
            newMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newMessageLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newMessageAccontsSenderList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newMessageAccountRecipient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newMessageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(newMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(144, Short.MAX_VALUE))
        );

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        messagePopup.add(Open);

        moveMessageToFolder.setText("Move To");
        moveMessageToFolder.setEnabled(false);
        messagePopup.add(moveMessageToFolder);

        showMessage.setMinimumSize(new java.awt.Dimension(670, 670));

        jLabel5.setText("From:");

        jLabel6.setText("To:");

        showMessageTo.setEditable(false);

        jLabel7.setText("Title:");

        showMessageTitle.setEditable(false);

        jLabel8.setText("Body:");

        showMessageBody.setEditable(false);
        showMessageBody.setColumns(20);
        showMessageBody.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        showMessageBody.setRows(5);
        jScrollPane4.setViewportView(showMessageBody);

        Re.setText("Re");
        Re.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReActionPerformed(evt);
            }
        });

        jButton6.setText("Cancel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        showMessageFrom.setEditable(false);
        jScrollPane5.setViewportView(showMessageFrom);

        javax.swing.GroupLayout showMessageLayout = new javax.swing.GroupLayout(showMessage.getContentPane());
        showMessage.getContentPane().setLayout(showMessageLayout);
        showMessageLayout.setHorizontalGroup(
            showMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showMessageLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(showMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(showMessageLayout.createSequentialGroup()
                        .addComponent(Re)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jSeparator2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(showMessageTo)
                    .addComponent(showMessageTitle)
                    .addComponent(jScrollPane5))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        showMessageLayout.setVerticalGroup(
            showMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showMessageLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel5)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showMessageTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showMessageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(showMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Re)
                    .addComponent(jButton6))
                .addContainerGap(144, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLayeredPane2.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLayeredPane2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jLayeredPane2.setEnabled(false);
        jLayeredPane2.setOpaque(true);

        labelList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(labelList);

        jScrollPane3.setBounds(0, 130, 180, 470);
        jLayeredPane2.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        systemFolder.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        systemFolder.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Input", "Output", "Spam", "Trash" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        systemFolder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        systemFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemFolderMouseClicked(evt);
            }
        });
        systemFolder.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                systemFolderValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(systemFolder);

        jScrollPane1.setBounds(0, 0, 180, 130);
        jLayeredPane2.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setOpaque(true);

        messagesList.setViewportView(messageList);

        messagesList.setBounds(0, 0, 570, 630);
        jLayeredPane1.add(messagesList, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setText("New Message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        statusMailBox.setText(":");

        mainFile.setText("File");

        mainLogout.setText("Logout");
        mainLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainLogoutActionPerformed(evt);
            }
        });
        mainFile.add(mainLogout);

        mainExit.setText("Exit");
        mainExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainExitActionPerformed(evt);
            }
        });
        mainFile.add(mainExit);

        jMenuBar1.add(mainFile);

        mainEdit.setText("Edit");

        mainCreateFolder.setText("Create new folder");
        mainCreateFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainCreateFolderActionPerformed(evt);
            }
        });
        mainEdit.add(mainCreateFolder);

        jMenuBar1.add(mainEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLayeredPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusMailBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addComponent(jLayeredPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusMailBox))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void popLableDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popLableDeleteActionPerformed
        confirmDeleteLabel.setLocationRelativeTo(null);
        confirmDeleteLabelText.setText("Folder \"" + labelList.getSelectedValue() + "\" will be deleted. Ok?");
        confirmDeleteLabel.setVisible(true);

        //Folder "Lort" will be deleted. Ok?
//        DeleteLabelWorker mod = new DeleteLabelWorker();
//        mod.execute();



    }//GEN-LAST:event_popLableDeleteActionPerformed

    private void confirmDeleteYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmDeleteYesActionPerformed
        DeleteLabelWorker mod = new DeleteLabelWorker();
        mod.execute();
        confirmDeleteLabel.setVisible(false);
    }//GEN-LAST:event_confirmDeleteYesActionPerformed

    private void confirmDeleteNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmDeleteNoActionPerformed
        confirmDeleteLabel.setVisible(false);
    }//GEN-LAST:event_confirmDeleteNoActionPerformed

    private void popLabelRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popLabelRenameActionPerformed
        confirmRenameLabel.setLocationRelativeTo(null);
        confirmRenameLabel.setVisible(true);
    }//GEN-LAST:event_popLabelRenameActionPerformed

    private void confirmRenameNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRenameNoActionPerformed
        newNameConfirmRenameLabel.setText("");
        confirmRenameLabel.setVisible(false);
    }//GEN-LAST:event_confirmRenameNoActionPerformed

    private void confirmRenameYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRenameYesActionPerformed

        new RenameLabelWorker().execute();

        confirmRenameLabel.setVisible(false);
    }//GEN-LAST:event_confirmRenameYesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        newMessage.setVisible(true);
        newMessage.setLocationRelativeTo(null);
        for (Iterator<AccountDTO> it = Client.getUser().getAccount().iterator(); it.hasNext();) {
            AccountDTO string = it.next();
            newMessageAccontsSenderList.addItem(string.getAccountName());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        newMessage.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new SendNewMailWorker().execute();
//        
        newMessage.setVisible(false);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new LoadInputMailWorker().execute();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void systemFolderValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_systemFolderValueChanged
    }//GEN-LAST:event_systemFolderValueChanged

    private void systemFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_systemFolderMouseClicked
        if (systemFolder.getSelectedIndex() == 0) {

            new LoadInputMailWorker().execute();

        } else if (systemFolder.getSelectedIndex() == 1) {
            new LoadOutputMailWorker().execute();
        }
    }//GEN-LAST:event_systemFolderMouseClicked

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        //  System.out.print("id status" + ((Object[])messageList.getSelectedValue())[4]);
        new LoadMessageByIdWorker().execute();
    }//GEN-LAST:event_OpenActionPerformed

    private void ReActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReActionPerformed
        newMessageAccountRecipient.setText(showMessageFrom.getText());
        newMessageTitle.setText("Re:" + showMessageTitle.getText());
        String re = "Re: from " + showMessageFrom.getText();
        newMessageAccontsSenderList.removeAllItems();
        for (Iterator<AccountDTO> it = Client.getUser().getAccount().iterator(); it.hasNext();) {
            AccountDTO string = it.next();
            newMessageAccontsSenderList.addItem(string.getAccountName());

        }
        // Not selected message sender WTF?
        newMessageAccontsSenderList.setSelectedItem(showMessageFrom.getText());
        newMessageBody.setText(re + "\n" + showMessageBody.getText());
        showMessage.setVisible(false);
        newMessage.setVisible(true);
    }//GEN-LAST:event_ReActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        showMessage.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void mainLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainLogoutActionPerformed
       Client.setMessageStatus(null);
       Client.setSendMessageStatusDTO(null);
       Client.setUser(null);
       this.setVisible(false);
       new Login().setVisible(true);
    }//GEN-LAST:event_mainLogoutActionPerformed

    private void mainExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainExitActionPerformed
       Client.getInstanse().close();
        System.exit(0);
    }//GEN-LAST:event_mainExitActionPerformed

    private void mainCreateFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainCreateFolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mainCreateFolderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MailBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MailBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MailBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MailBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MailBox().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton Re;
    private javax.swing.JDialog confirmDeleteLabel;
    private javax.swing.JLabel confirmDeleteLabelText;
    private javax.swing.JButton confirmDeleteNo;
    private javax.swing.JButton confirmDeleteYes;
    private javax.swing.JDialog confirmRenameLabel;
    private javax.swing.JButton confirmRenameNo;
    private javax.swing.JButton confirmRenameYes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList labelList;
    private javax.swing.JLabel labelNewNameConfirmRenameLabel;
    private javax.swing.JPopupMenu labelPopUp;
    private javax.swing.JMenuItem mainCreateFolder;
    private javax.swing.JMenu mainEdit;
    private javax.swing.JMenuItem mainExit;
    private javax.swing.JMenu mainFile;
    private javax.swing.JMenuItem mainLogout;
    private javax.swing.JList messageList;
    private javax.swing.JPopupMenu messagePopup;
    private javax.swing.JScrollPane messagesList;
    private javax.swing.JMenuItem moveMessageToFolder;
    private javax.swing.JDialog newMessage;
    private javax.swing.JComboBox newMessageAccontsSenderList;
    private javax.swing.JTextField newMessageAccountRecipient;
    private javax.swing.JTextArea newMessageBody;
    private javax.swing.JTextField newMessageTitle;
    private javax.swing.JTextField newNameConfirmRenameLabel;
    private javax.swing.JMenuItem popLabelRename;
    private javax.swing.JMenuItem popLableDelete;
    private javax.swing.JDialog showMessage;
    private javax.swing.JTextArea showMessageBody;
    private javax.swing.JTextPane showMessageFrom;
    private javax.swing.JTextField showMessageTitle;
    private javax.swing.JTextField showMessageTo;
    private javax.swing.JLabel statusMailBox;
    private javax.swing.JList systemFolder;
    // End of variables declaration//GEN-END:variables

    class DeleteLabelWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {

            LabelDTO label = new LabelDTO();
            String[] add = ((String) labelList.getSelectedValue()).split(" - ");
            label.setName(add[0]);
            label.setAccount(add[1]);

            Client.getInstanse().getOut().writeObject(
                    new Command(CommandType.DELETE_LABEL, label));


            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                labb.remove(labelList.getSelectedValue());
                labelList.setListData(labb.toArray());
            }
            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }

    class RenameLabelWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {

            LabelDTO label = new LabelDTO();
            String[] add = ((String) labelList.getSelectedValue()).split(" - ");
            label.setName(add[0]);
            label.setAccount(add[1]);

            Client.getInstanse().getOut().writeObject(
                    new Command(CommandType.RENAME_LABEL, new Object[]{label, newNameConfirmRenameLabel.getText()}));


            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                labb.remove(labelList.getSelectedValue());
                labb.add(newNameConfirmRenameLabel.getText() + " - " + add[1]);
                labelList.setListData(labb.toArray());
                newNameConfirmRenameLabel.setText("");
            }
            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }

    class LoadInputMailWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {
            Set<AccountDTO> accounts = Client.getUser().getAccount();

            Client.getInstanse().getOut().writeObject(new Command(CommandType.GET_MESSAGES, accounts));
            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                List<MessageStatussDTO> messageStatussDTOs = (List<MessageStatussDTO>) result.getResult();
                Collections.sort(messageStatussDTOs);
                Client.setMessageStatus(messageStatussDTOs);
                //System.out.println("Count Message" + Client.getMessageStatus().size());
                //System.out.println(Client.getMessageStatus().get(0));

                List<Object[]> elements = new ArrayList<Object[]>();
                // Object elements[][] = new Object[Client.getMessageStatus().size()][4];
                //             elements = new Object[Client.getMessageStatus().size()][2];
//                
//                Object elements[][] = new Object[][]{
//                {new Font("Tahoma", Font.PLAIN, 18), Color.RED, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.BLUE, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.GREEN, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.GRAY, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.PINK, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.YELLOW, new MyIcon(), "A"},
//                {new Font("Tahoma", Font.PLAIN, 18), Color.DARK_GRAY, new MyIcon(), "A"}};

                for (Iterator<MessageStatussDTO> it = Client.getMessageStatus().iterator(); it.hasNext();) {
                    MessageStatussDTO messageStatussDTO = it.next();
                    // elements.add(Arrays.asList(new Font("Tahoma", Font.PLAIN, 18), Color.RED, new MyIcon(), messageStatussDTO.getAcountsSender().getAccountName()).toArray());
                    Color color;
                    if (messageStatussDTO.getIsRead()) {
                        color = Color.GREEN;
                    } else {
                        color = Color.RED;
                    }
                    elements.add(new Object[]{new Font("Tahoma", Font.PLAIN, 12), Color.DARK_GRAY, new MyIcon(color, ru.t_systems.demail.gui.MailBox.this), "to: " + messageStatussDTO.getAccount().getAccountName() + " from: " + messageStatussDTO.getAcountsSender().getAccountName() + " -- " + messageStatussDTO.getDate(), messageStatussDTO.getId()});
                }

                ListCellRenderer renderer = new ComplexCellRenderer(ru.t_systems.demail.gui.MailBox.this);
                messageList.setCellRenderer(renderer);
                messageList.setListData(elements.toArray());
            }

            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }

    class SendNewMailWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {

            MessageDTO messageDTO = new MessageDTO();
            messageDTO.setBody(newMessageBody.getText());
            List<MessageStatussDTO> messageStatussDTOs = new ArrayList<MessageStatussDTO>();
            MessageStatussDTO messageStatussDTO = new MessageStatussDTO();
            AccountDTO accountDTOsender = new AccountDTO();
            accountDTOsender.setAccountName(newMessageAccontsSenderList.getSelectedItem().toString());
            messageStatussDTO.setAcountsSender(accountDTOsender);
            AccountDTO accountDTO = new AccountDTO();
            accountDTO.setAccountName(newMessageAccountRecipient.getText());
            messageStatussDTO.setAccount(accountDTO);
            messageStatussDTO.setIsRead(true);
            messageStatussDTOs.add(messageStatussDTO);
            messageDTO.setStatus(messageStatussDTOs);
            messageDTO.setTitle(newMessageTitle.getText());
            Client.getInstanse().getOut().writeObject(new Command(CommandType.SEND_MESSAGE, messageDTO));

            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                statusMailBox.setText("Message send");
                newMessageAccountRecipient.setText("");
                newMessageAccontsSenderList.removeAllItems();
                newMessageBody.setText("");
                newMessageTitle.setText("");
            } else {
                statusMailBox.setText("Error send message: " + result.getError());
            }


            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }

    class LoadOutputMailWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {
            Set<AccountDTO> accounts = Client.getUser().getAccount();

            Client.getInstanse().getOut().writeObject(new Command(CommandType.GET_SEND_MESSAGE, accounts));
            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                List<MessageStatussDTO> messageStatussDTOs = (List<MessageStatussDTO>) result.getResult();
                Collections.sort(messageStatussDTOs);
                Client.setMessageStatus(messageStatussDTOs);
                List<Object[]> elements = new ArrayList<Object[]>();

                for (Iterator<MessageStatussDTO> it = Client.getMessageStatus().iterator(); it.hasNext();) {
                    MessageStatussDTO messageStatussDTO = it.next();
                    // elements.add(Arrays.asList(new Font("Tahoma", Font.PLAIN, 18), Color.RED, new MyIcon(), messageStatussDTO.getAcountsSender().getAccountName()).toArray());


                    elements.add(new Object[]{new Font("Tahoma", Font.PLAIN, 12), Color.DARK_GRAY, new MyIcon(Color.GREEN, ru.t_systems.demail.gui.MailBox.this), " from: " + messageStatussDTO.getAcountsSender().getAccountName() + "to: " + messageStatussDTO.getAccount().getAccountName(), messageStatussDTO.getId()});
                }

                ListCellRenderer renderer = new ComplexCellRenderer(ru.t_systems.demail.gui.MailBox.this);
                messageList.setCellRenderer(renderer);

                messageList.setListData(elements.toArray());
            }

            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }

    class LoadMessageByIdWorker extends SwingWorker<Integer, Integer> {

        protected Integer doInBackground() throws Exception {
            Integer id = (Integer) ((Object[]) messageList.getSelectedValue())[4];

            Client.getInstanse().getOut().writeObject(new Command(CommandType.GEt_MESSAGE_BY_ID, id));
            Result result = null;
            Object object = Client.getInstanse().getIn().readObject();

            if (object instanceof Result) {
                result = (Result) object;
            }
            if (!result.isHasError()) {
                MessageDTO messageDTO = (MessageDTO) result.getResult();
                // System.out.println("MessageDTO = " +messageDTO);
                showMessage.setVisible(true);
                showMessageFrom.setText(messageDTO.getStatus().get(0).getAcountsSender().getAccountName());
                showMessageTo.setText(messageDTO.getStatus().get(0).getAccount().getAccountName());
                showMessageBody.setText(messageDTO.getBody());
                showMessageTitle.setText(messageDTO.getTitle());
            }
            return 42;
        }

        @Override
        protected void done() {
            // will be executed when background execution is done
        }
    }
}
